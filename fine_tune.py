#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
by Morzh - –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
"""

import json
import subprocess
import os
from pathlib import Path

def create_training_data():
    """–°–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è"""
    
    training_data = [
        # iPhone
        {"input": "iPhone 15 Pro Max 256GB", "output": "{\"category\": \"iphone\", \"confidence\": 0.98, \"reasoning\": \"iPhone 15 Pro Max - —Ñ–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple\"}"},
        {"input": "iPhone 14 128GB", "output": "{\"category\": \"iphone\", \"confidence\": 0.98, \"reasoning\": \"iPhone 14 - —Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple\"}"},
        {"input": "iPhone SE 2022", "output": "{\"category\": \"iphone\", \"confidence\": 0.98, \"reasoning\": \"iPhone SE - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple\"}"},
        
        # Processors
        {"input": "Intel Core i9-14900K", "output": "{\"category\": \"processors\", \"confidence\": 0.98, \"reasoning\": \"Intel Core i9 - –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –ü–ö\"}"},
        {"input": "AMD Ryzen 9 7950X", "output": "{\"category\": \"processors\", \"confidence\": 0.98, \"reasoning\": \"AMD Ryzen 9 - –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –ü–ö\"}"},
        {"input": "Intel Core i7-13700K", "output": "{\"category\": \"processors\", \"confidence\": 0.98, \"reasoning\": \"Intel Core i7 - –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –ü–ö\"}"},
        
        # Videocards
        {"input": "NVIDIA RTX 4070 Ti", "output": "{\"category\": \"videocards\", \"confidence\": 0.98, \"reasoning\": \"NVIDIA RTX - –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ –¥–ª—è –∏–≥—Ä\"}"},
        {"input": "AMD RX 7900 XTX", "output": "{\"category\": \"videocards\", \"confidence\": 0.98, \"reasoning\": \"AMD RX - –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ –¥–ª—è –∏–≥—Ä\"}"},
        {"input": "NVIDIA RTX 4090", "output": "{\"category\": \"videocards\", \"confidence\": 0.98, \"reasoning\": \"NVIDIA RTX - —Ñ–ª–∞–≥–º–∞–Ω—Å–∫–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞\"}"},
        
        # Motherboards
        {"input": "ASUS ROG STRIX Z790-E", "output": "{\"category\": \"motherboards\", \"confidence\": 0.98, \"reasoning\": \"ASUS ROG - –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞ –¥–ª—è Intel\"}"},
        {"input": "MSI MPG B650", "output": "{\"category\": \"motherboards\", \"confidence\": 0.98, \"reasoning\": \"MSI MPG - –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞ –¥–ª—è AMD\"}"},
        {"input": "Gigabyte AORUS X670E", "output": "{\"category\": \"motherboards\", \"confidence\": 0.98, \"reasoning\": \"Gigabyte AORUS - –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞ –¥–ª—è AMD\"}"},
        
        # PlayStation
        {"input": "PlayStation 5", "output": "{\"category\": \"playstation\", \"confidence\": 0.98, \"reasoning\": \"PlayStation 5 - –∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å Sony\"}"},
        {"input": "PS5 Digital Edition", "output": "{\"category\": \"playstation\", \"confidence\": 0.98, \"reasoning\": \"PS5 Digital - —Ü–∏—Ñ—Ä–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–Ω—Å–æ–ª–∏ Sony\"}"},
        {"input": "PlayStation 4 Pro", "output": "{\"category\": \"playstation\", \"confidence\": 0.98, \"reasoning\": \"PlayStation 4 Pro - –∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å Sony\"}"},
        
        # Nintendo Switch
        {"input": "Nintendo Switch OLED", "output": "{\"category\": \"nintendo-switch\", \"confidence\": 0.98, \"reasoning\": \"Nintendo Switch OLED - –≥–∏–±—Ä–∏–¥–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å Nintendo\"}"},
        {"input": "Nintendo Switch Lite", "output": "{\"category\": \"nintendo-switch\", \"confidence\": 0.98, \"reasoning\": \"Nintendo Switch Lite - –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å Nintendo\"}"},
        {"input": "Nintendo Switch", "output": "{\"category\": \"nintendo-switch\", \"confidence\": 0.98, \"reasoning\": \"Nintendo Switch - –≥–∏–±—Ä–∏–¥–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å Nintendo\"}"},
        
        # Steam Deck
        {"input": "Steam Deck 512GB", "output": "{\"category\": \"steam-deck\", \"confidence\": 0.98, \"reasoning\": \"Steam Deck - –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å Valve\"}"},
        {"input": "Steam Deck 256GB", "output": "{\"category\": \"steam-deck\", \"confidence\": 0.98, \"reasoning\": \"Steam Deck - –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å Valve\"}"},
        {"input": "Steam Deck 64GB", "output": "{\"category\": \"steam-deck\", \"confidence\": 0.98, \"reasoning\": \"Steam Deck - –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å Valve\"}"},
    ]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    with open('training_data.json', 'w', encoding='utf-8') as f:
        json.dump(training_data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(training_data)} –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    return training_data

def create_finetune_modelfile():
    """–°–æ–∑–¥–∞—Ç—å Modelfile –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è"""
    
    modelfile_content = """FROM t-pro-it-2.0-optimized

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è
PARAMETER num_ctx 4096
PARAMETER num_gpu 35
PARAMETER num_thread 8
PARAMETER temperature 0.1
PARAMETER top_k 40
PARAMETER top_p 0.9
PARAMETER repeat_penalty 1.1

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
SYSTEM """–¢—ã —Ç–æ—á–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: iphone, processors, videocards, motherboards, playstation, nintendo-switch, steam-deck
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {"category": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "confidence": 0.95, "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"}"""

# –®–∞–±–ª–æ–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
TEMPLATE """–¢–æ–≤–∞—Ä: {{.Input}}

–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {{.Response}}"""

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
{{range .Data}}
{{.Input}}
{{.Output}}
{{end}}
"""
    
    with open('Modelfile.finetune', 'w', encoding='utf-8') as f:
        f.write(modelfile_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω Modelfile.finetune –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è")

def prepare_training_data():
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Ollama"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with open('training_data.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Ollama
    with open('training_data.txt', 'w', encoding='utf-8') as f:
        for item in data:
            f.write(f"–¢–æ–≤–∞—Ä: {item['input']}\n")
            f.write(f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {item['output']}\n\n")
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéì –î–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ML Product Classifier")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
    create_training_data()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    prepare_training_data()
    
    # –°–æ–∑–¥–∞–µ–º Modelfile –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ Modelfile –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è...")
    create_finetune_modelfile()
    
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å t-pro-it-2.0-optimized —Å–æ–∑–¥–∞–Ω–∞")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
    print("   ollama create t-pro-it-2.0-finetuned -f Modelfile.finetune")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å:")
    print("   ollama run t-pro-it-2.0-finetuned 'iPhone 15 Pro'")
    print("4. –û–±–Ω–æ–≤–∏—Ç–µ model_name –≤ src/ml_model.py –Ω–∞ t-pro-it-2.0-finetuned")
    
    print("\nüí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:")
    print("- –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ training_data.json")
    print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
    print("- –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ edge cases (–Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã)")
    print("- –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")

if __name__ == "__main__":
    main() 