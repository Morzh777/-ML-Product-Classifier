#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ML Product Classifier
by Morzh - –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
"""

import subprocess
import json
import time
import sys

def create_fast_modelfile():
    """–°–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Modelfile –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    
    modelfile_content = """FROM hf.co/t-tech/T-pro-it-2.0-GGUF:Q2_K

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
PARAMETER num_ctx 2048          # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
PARAMETER num_gpu 40            # –ë–æ–ª—å—à–µ —Å–ª–æ–µ–≤ –Ω–∞ GPU
PARAMETER num_thread 12         # –ë–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤ CPU
PARAMETER temperature 0.1       # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
PARAMETER top_k 20              # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
PARAMETER top_p 0.8             # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
PARAMETER repeat_penalty 1.0    # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
PARAMETER seed 42               # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
SYSTEM """–¢—ã –±—ã—Å—Ç—Ä—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: iphone, processors, videocards, motherboards, playstation, nintendo-switch, steam-deck
–§–æ—Ä–º–∞—Ç: {"category": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "confidence": 0.95, "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"}"""

# –®–∞–±–ª–æ–Ω –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
TEMPLATE """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π: {{.Input}}

JSON:"""
"""
    
    with open('Modelfile.fast', 'w', encoding='utf-8') as f:
        f.write(modelfile_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω Modelfile.fast –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏")

def create_balanced_modelfile():
    """–°–æ–∑–¥–∞—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Modelfile"""
    
    modelfile_content = """FROM hf.co/t-tech/T-pro-it-2.0-GGUF:Q2_K

# –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
PARAMETER num_ctx 3072          # –°—Ä–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
PARAMETER num_gpu 35            # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ –Ω–∞ GPU
PARAMETER num_thread 8          # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
PARAMETER temperature 0.2       # –ù–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
PARAMETER top_k 30              # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ
PARAMETER top_p 0.9             # –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
PARAMETER repeat_penalty 1.05   # –õ–µ–≥–∫–∏–π penalty
PARAMETER seed 42

SYSTEM """–¢—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤. –û—Ç–≤–µ—á–∞–π –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: iphone, processors, videocards, motherboards, playstation, nintendo-switch, steam-deck
–§–æ—Ä–º–∞—Ç: {"category": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "confidence": 0.95, "reasoning": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"}"""

TEMPLATE """–¢–æ–≤–∞—Ä: {{.Input}}

–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:"""
"""
    
    with open('Modelfile.balanced', 'w', encoding='utf-8') as f:
        f.write(modelfile_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω Modelfile.balanced –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞")

def benchmark_models():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    
    test_prompt = "iPhone 15 Pro Max 256GB - –°–º–∞—Ä—Ç—Ñ–æ–Ω Apple —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º A17 Pro"
    
    models = [
        ("t-pro-it-2.0-optimized", "–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å"),
        ("t-pro-it-2.0-fast", "–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å"),
        ("t-pro-it-2.0-balanced", "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
    ]
    
    print("üèÉ‚Äç‚ôÇÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π...")
    print("=" * 60)
    
    results = []
    
    for model_name, description in models:
        try:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {description} ({model_name})...")
            
            start_time = time.time()
            result = subprocess.run(
                ["ollama", "run", model_name, test_prompt],
                capture_output=True,
                text=True,
                encoding='utf-8',
                timeout=30
            )
            elapsed_time = time.time() - start_time
            
            if result.returncode == 0:
                print(f"‚úÖ –í—Ä–µ–º—è: {elapsed_time:.2f} —Å–µ–∫")
                print(f"üìù –û—Ç–≤–µ—Ç: {result.stdout.strip()[:100]}...")
                results.append((model_name, elapsed_time, "‚úÖ"))
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
                results.append((model_name, 0, "‚ùå"))
                
        except subprocess.TimeoutExpired:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç (>30 —Å–µ–∫)")
            results.append((model_name, 30, "‚è∞"))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            results.append((model_name, 0, "‚ùå"))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    for model_name, time_taken, status in results:
        print(f"{status} {model_name}: {time_taken:.2f} —Å–µ–∫")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    working_models = [r for r in results if r[2] == "‚úÖ"]
    if working_models:
        fastest = min(working_models, key=lambda x: x[1])
        print(f"\nüèÜ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {fastest[0]} ({fastest[1]:.2f} —Å–µ–∫)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ML Product Classifier")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    create_fast_modelfile()
    create_balanced_modelfile()
    
    print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å
    print("\nüîÑ –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å...")
    result = subprocess.run(
        ["ollama", "create", "t-pro-it-2.0-fast", "-f", "Modelfile.fast"],
        capture_output=True,
        text=True
    )
    if result.returncode == 0:
        print("‚úÖ –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π –º–æ–¥–µ–ª–∏: {result.stderr}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    print("\nüîÑ –°–æ–∑–¥–∞–µ–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å...")
    result = subprocess.run(
        ["ollama", "create", "t-pro-it-2.0-balanced", "-f", "Modelfile.balanced"],
        capture_output=True,
        text=True
    )
    if result.returncode == 0:
        print("‚úÖ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏: {result.stderr}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    benchmark_models()
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –í—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –∏–∑ —Ç–µ—Å—Ç–æ–≤")
    print("2. –û–±–Ω–æ–≤–∏—Ç–µ model_name –≤ src/ml_model.py")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("4. –î–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ fine-tuning")

if __name__ == "__main__":
    main() 