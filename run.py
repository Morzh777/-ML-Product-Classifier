#!/usr/bin/env python3
"""
ML Product Classifier - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
by Morzh - –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
"""

import os
import sys
import json
import logging
import time
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

from ml_model import ProductClassifier

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    encoding='utf-8'
)
logger = logging.getLogger(__name__)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ ML Product Classifier")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä...")
        classifier = ProductClassifier()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        model_info = classifier.get_model_info()
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏: {json.dumps(model_info, indent=2, ensure_ascii=False)}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ Ollama...")
        start_time = time.time()
        
        if not classifier.load_model():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å")
            return
        
        load_time = time.time() - start_time
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {load_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å...")
        test_products = [
            # PlayStation 5 - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞
            {
                'name': 'PlayStation 5',
                'description': '–ò–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ Sony PlayStation 5'
            },
            {
                'name': 'PlayStation 5 Slim',
                'description': '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ Sony PS5'
            },
            {
                'name': 'PlayStation 5 Pro',
                'description': '–ú–æ—â–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ Sony PS5 Pro'
            },
            
            # –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∫ PlayStation (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å unknown)
            {
                'name': 'DualSense Controller',
                'description': '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –≥–µ–π–º–ø–∞–¥ –¥–ª—è PlayStation 5'
            },
            {
                'name': 'PlayStation VR2',
                'description': 'VR –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è PlayStation 5'
            },
            {
                'name': 'DualSense Edge',
                'description': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–π–º–ø–∞–¥ –¥–ª—è PS5'
            },
            {
                'name': 'PlayStation 5 Stand',
                'description': '–ü–æ–¥—Å—Ç–∞–≤–∫–∞ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PS5'
            },
            {
                'name': 'PlayStation 5 SSD',
                'description': '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π SSD –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ PS5'
            },
            
            # Nintendo Switch - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞
            {
                'name': 'Nintendo Switch OLED',
                'description': '–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ Nintendo Switch'
            },
            {
                'name': 'Nintendo Switch Lite',
                'description': '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ Nintendo'
            },
            
            # –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∫ Nintendo (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å unknown)
            {
                'name': 'Joy-Con Controllers',
                'description': '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è Nintendo Switch'
            },
            {
                'name': 'Nintendo Switch Pro Controller',
                'description': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–π–º–ø–∞–¥ –¥–ª—è Switch'
            },
            {
                'name': 'Nintendo Switch Dock',
                'description': '–î–æ–∫-—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TV'
            },
            
            # Steam Deck - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞
            {
                'name': 'Steam Deck OLED',
                'description': '–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ Valve Steam Deck'
            },
            {
                'name': 'Steam Deck LCD',
                'description': '–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ Valve'
            },
            
            # –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∫ Steam Deck (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å unknown)
            {
                'name': 'Steam Deck Dock',
                'description': '–î–æ–∫-—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è Steam Deck'
            },
            {
                'name': 'Steam Deck Case',
                'description': '–ó–∞—â–∏—Ç–Ω—ã–π —á–µ—Ö–æ–ª –¥–ª—è Steam Deck'
            },
            
            # iPhone - –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã
            {
                'name': 'iPhone 15 Pro Max 256GB',
                'description': '–°–º–∞—Ä—Ç—Ñ–æ–Ω Apple iPhone 15 Pro Max'
            },
            {
                'name': 'iPhone 15 Pro 128GB',
                'description': '–°–º–∞—Ä—Ç—Ñ–æ–Ω Apple iPhone 15 Pro'
            },
            {
                'name': 'iPhone 14 128GB',
                'description': '–°–º–∞—Ä—Ç—Ñ–æ–Ω Apple iPhone 14'
            },
            
            # –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∫ iPhone (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å unknown)
            {
                'name': 'AirPods Pro 2',
                'description': '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ Apple –¥–ª—è iPhone'
            },
            {
                'name': 'Apple Watch Series 9',
                'description': '–£–º–Ω—ã–µ —á–∞—Å—ã Apple –¥–ª—è iPhone'
            },
            {
                'name': 'iPhone 15 Pro Case',
                'description': '–ó–∞—â–∏—Ç–Ω—ã–π —á–µ—Ö–æ–ª –¥–ª—è iPhone 15 Pro'
            },
            {
                'name': 'MagSafe Charger',
                'description': '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞ –¥–ª—è iPhone'
            },
            
            # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            {
                'name': 'Intel Core i9-14900K',
                'description': '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä Intel Core i9 –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –ü–ö'
            },
            {
                'name': 'AMD Ryzen 9 7950X',
                'description': '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä AMD Ryzen 9 –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –ü–ö'
            },
            
            # –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å unknown)
            {
                'name': 'Noctua NH-D15',
                'description': '–ö—É–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ Intel/AMD'
            },
            {
                'name': 'Thermal Grizzly Kryonaut',
                'description': '–¢–µ—Ä–º–æ–ø–∞—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞'
            },
            
            # –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            {
                'name': 'NVIDIA RTX 4070 Ti',
                'description': '–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ NVIDIA GeForce RTX 4070 Ti'
            },
            {
                'name': 'AMD RX 7900 XTX',
                'description': '–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ AMD Radeon RX 7900 XTX'
            },
            
            # –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∫ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞–º (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å unknown)
            {
                'name': 'Corsair RM850x',
                'description': '–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã'
            },
            {
                'name': 'GPU Support Bracket',
                'description': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ç—è–∂–µ–ª–æ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã'
            }
        ]
        
        # –¢–µ—Å—Ç –±–∞—Ç—á–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        test_batch = test_products[:10]
        logger.info(f"\nüöÄ –¢–µ—Å—Ç –±–∞—Ç—á –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ ({len(test_batch)} —Ç–æ–≤–∞—Ä–æ–≤)")
        batch_results = classifier.classify_products_batch(test_batch)
        
        batch_time = 0
        for i, result in enumerate(batch_results, 1):
            if 'error' in result:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä {i}: {result['error']}")
            else:
                product_name = result.get('product_name', f'–¢–æ–≤–∞—Ä {i}')
                category = result.get('predicted_category', 'unknown')
                confidence = result.get('confidence', 0.0)
                logger.info(f"‚úÖ –¢–æ–≤–∞—Ä {i}: {product_name} ‚Üí {category} ({confidence:.2f})")
                batch_time += result.get('processing_time', 0)
        
        avg_batch_time = batch_time / len(test_batch) if test_batch else 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_stats = {}
        for result in batch_results:
            if 'error' not in result:
                category = result.get('predicted_category', 'unknown')
                if category not in category_stats:
                    category_stats[category] = {'count': 0, 'confidence_sum': 0}
                category_stats[category]['count'] += 1
                category_stats[category]['confidence_sum'] += result.get('confidence', 0)
        
        logger.info(f"\nüìà –ë–∞—Ç—á —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        logger.info(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {batch_time:.2f} —Å–µ–∫")
        logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç: {avg_batch_time:.2f} —Å–µ–∫")
        logger.info(f"   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(test_batch)}")
        
        logger.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, stats in category_stats.items():
            avg_conf = stats['confidence_sum'] / stats['count'] if stats['count'] > 0 else 0
            logger.info(f"   {category}: {stats['count']} —Ç–æ–≤–∞—Ä–æ–≤ (—Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_conf:.2f})")
        
        # –¢–µ—Å—Ç –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        logger.info(f"\nüîç –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É")
        single_total_time = 0
        test_count = 0
        for i, product in enumerate(test_products[:5], 1):  # –ü–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
            logger.info(f"üß™ –¢–µ—Å—Ç {i}: {product['name']}")
            result = classifier.classify_product(product)
            
            if 'error' in result:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            else:
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['predicted_category']} ({result['confidence']:.2f})")
                single_total_time += result.get('processing_time', 0)
                test_count += 1
        
        avg_single_time = single_total_time / test_count if test_count > 0 else 0
        logger.info(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
        logger.info(f"   –ë–∞—Ç—á: {avg_batch_time:.2f} —Å–µ–∫/—Ç–æ–≤–∞—Ä")
        logger.info(f"   –ü–æ –æ–¥–Ω–æ–º—É: {avg_single_time:.2f} —Å–µ–∫/—Ç–æ–≤–∞—Ä")
        
        if avg_batch_time > 0 and avg_single_time > 0:
            if avg_batch_time < avg_single_time:
                speedup = avg_single_time / avg_batch_time
                logger.info(f"üöÄ –ë–∞—Ç—á –±—ã—Å—Ç—Ä–µ–µ –≤ {speedup:.1f}x —Ä–∞–∑!")
            else:
                speedup = avg_batch_time / avg_single_time
                logger.info(f"‚ö° –û–¥–∏–Ω–æ—á–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –±—ã—Å—Ç—Ä–µ–µ –≤ {speedup:.1f}x —Ä–∞–∑!")
        else:
            logger.info("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main: {str(e)}")
        raise

if __name__ == "__main__":
    main() 