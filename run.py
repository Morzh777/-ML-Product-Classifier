#!/usr/bin/env python3
"""
ML Product Classifier - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
by Morzh - –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
"""

import os
import sys
import json
import logging
import time
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

from ml_model import ProductClassifier

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    encoding='utf-8'
)
logger = logging.getLogger(__name__)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ ML Product Classifier")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä...")
        classifier = ProductClassifier()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        model_info = classifier.get_model_info()
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏: {json.dumps(model_info, indent=2, ensure_ascii=False)}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ Ollama...")
        start_time = time.time()
        
        if not classifier.load_model():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å")
            return
        
        load_time = time.time() - start_time
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {load_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å...")
        test_products = [
            {
                'name': 'iPhone 15 Pro Max 256GB',
                'description': '–°–º–∞—Ä—Ç—Ñ–æ–Ω Apple —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º A17 Pro'
            },
            {
                'name': 'Intel Core i9-14900K',
                'description': '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä Intel –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –ü–ö'
            },
            {
                'name': 'NVIDIA RTX 4070 Ti',
                'description': '–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ NVIDIA —Å 12GB GDDR6X'
            }
        ]
        
        total_time = 0
        for i, product in enumerate(test_products, 1):
            logger.info(f"\nüß™ –¢–µ—Å—Ç {i}: {product['name']}")
            result = classifier.classify_product(product)
            
            if 'error' in result:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            else:
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
                total_time += result.get('processing_time', 0)
        
        avg_time = total_time / len(test_products) if test_products else 0
        logger.info(f"\nüìà –ò—Ç–æ–≥–∏:")
        logger.info(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
        logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç: {avg_time:.2f} —Å–µ–∫")
        
        if avg_time < 10:
            logger.info("üöÄ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
        elif avg_time < 20:
            logger.info("‚ö° –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        else:
            logger.info("üêå –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main: {str(e)}")
        raise

if __name__ == "__main__":
    main() 